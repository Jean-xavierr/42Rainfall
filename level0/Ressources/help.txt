# LEVEL0

We find an executable named `level0`. Running it gives us a segfault, and running it with an argument (`./level0 arg`) prints `No !` to stdout.

We start by copying the executable to our local machine :

```
scp -P 4242 level0@<RAINFALL_IP>:level0 .
```

We open the executable with **Cutter**, a reverse engineering tool. When Cutter's done processing it, it gives us a complex mesh of assembly code.

We select `main` on the left menu, then `Graph (main)` on the bottom. We get a simplified view, showing us how the program runs :

![Cutter graph (main)](https://i.imgur.com/N32mNLP.png)

What does this mean ?

The top block is the beginning of the program. It seems to split after a certain condition, running either :
- A block containing a `write` - likely, what prints `No !` (on the right)
- A block containing the classic `get*id`, `set*id` and `execve` functions - which elevate user privileges (on the left)

We examine the condition :

```
call    atoi                      ; sym.atoi ; int atoi(const char *str)
cmp     eax, 0x1a7                ; 423
jne     0x8048f58
```

A call to `atoi()`, followed by a comparison to the number `423`, and a conditional jump (`jne` standing for *Jump if Not-Equal*). It's clear the program expects that number as first argument.

We try :

```
./level0 423
```

It works ! The executable enters an interactive, privileged shell-like `execve` loop, prompting us with `$ `.

We run :

```
cat /home/user/level1/.pass
```

We get the level0 flag (which is also the level1 password) :

```
1fe8a524fa4bec01ca4ea2a869af2a02260d4a7d5fe7e7c24d8617e6dca12d3a
```

----------------------------------------------------------------
First Test

```
level0@RainFall:~$ ./level0 
Segmentation fault (core dumped)
```

```
level0@RainFall:~$ ./level0 test
No !
level0@RainFall:~$ ./level0 test test1 test2
No !
```

`gdb level0`


```
(gdb) disas main
Dump of assembler code for function main:
   0x08048ec0 <+0>:	push   ebp
   0x08048ec1 <+1>:	mov    ebp,esp
   0x08048ec3 <+3>:	and    esp,0xfffffff0
   0x08048ec6 <+6>:	sub    esp,0x20
   0x08048ec9 <+9>:	mov    eax,DWORD PTR [ebp+0xc]
   0x08048ecc <+12>:	add    eax,0x4
   0x08048ecf <+15>:	mov    eax,DWORD PTR [eax]
   0x08048ed1 <+17>:	mov    DWORD PTR [esp],eax
   0x08048ed4 <+20>:	call   0x8049710 <atoi>
   0x08048ed9 <+25>:	cmp    eax,0x1a7
   0x08048ede <+30>:	jne    0x8048f58 <main+152>
   0x08048ee0 <+32>:	mov    DWORD PTR [esp],0x80c5348
   0x08048ee7 <+39>:	call   0x8050bf0 <strdup>
   0x08048eec <+44>:	mov    DWORD PTR [esp+0x10],eax
   0x08048ef0 <+48>:	mov    DWORD PTR [esp+0x14],0x0
   0x08048ef8 <+56>:	call   0x8054680 <getegid>
   0x08048efd <+61>:	mov    DWORD PTR [esp+0x1c],eax
   0x08048f01 <+65>:	call   0x8054670 <geteuid>
   0x08048f06 <+70>:	mov    DWORD PTR [esp+0x18],eax
   0x08048f0a <+74>:	mov    eax,DWORD PTR [esp+0x1c]
   0x08048f0e <+78>:	mov    DWORD PTR [esp+0x8],eax
   0x08048f12 <+82>:	mov    eax,DWORD PTR [esp+0x1c]
   0x08048f16 <+86>:	mov    DWORD PTR [esp+0x4],eax
   0x08048f1a <+90>:	mov    eax,DWORD PTR [esp+0x1c]
   0x08048f1e <+94>:	mov    DWORD PTR [esp],eax
   0x08048f21 <+97>:	call   0x8054700 <setresgid>
   0x08048f26 <+102>:	mov    eax,DWORD PTR [esp+0x18]
   0x08048f2a <+106>:	mov    DWORD PTR [esp+0x8],eax
   0x08048f2e <+110>:	mov    eax,DWORD PTR [esp+0x18]
   0x08048f32 <+114>:	mov    DWORD PTR [esp+0x4],eax
   0x08048f36 <+118>:	mov    eax,DWORD PTR [esp+0x18]
   0x08048f3a <+122>:	mov    DWORD PTR [esp],eax
   0x08048f3d <+125>:	call   0x8054690 <setresuid>
   0x08048f42 <+130>:	lea    eax,[esp+0x10]
   0x08048f46 <+134>:	mov    DWORD PTR [esp+0x4],eax
   0x08048f4a <+138>:	mov    DWORD PTR [esp],0x80c5348
   0x08048f51 <+145>:	call   0x8054640 <execv>
   0x08048f56 <+150>:	jmp    0x8048f80 <main+192>
   0x08048f58 <+152>:	mov    eax,ds:0x80ee170
   0x08048f5d <+157>:	mov    edx,eax
   0x08048f5f <+159>:	mov    eax,0x80c5350
   0x08048f64 <+164>:	mov    DWORD PTR [esp+0xc],edx
   0x08048f68 <+168>:	mov    DWORD PTR [esp+0x8],0x5
   0x08048f70 <+176>:	mov    DWORD PTR [esp+0x4],0x1
   0x08048f78 <+184>:	mov    DWORD PTR [esp],eax
   0x08048f7b <+187>:	call   0x804a230 <fwrite>
   0x08048f80 <+192>:	mov    eax,0x0
   0x08048f85 <+197>:	leave  
   0x08048f86 <+198>:	ret    
End of assembler dump.
```

```
   0x08048ed9 <+25>:	cmp    eax,0x1a7
   0x08048ede <+30>:	jne    0x8048f58 <main+152>

(gdb) p $eax
$1 = 0
(gdb) p 0x1a7
$2 = 423
(gdb) jump *0x8048f58
Continuing at 0x8048f58.
No !
```


```
level0@RainFall:~$ ./level0 423
$ cat /home/user/level1/.pass
1fe8a524fa4bec01ca4ea2a869af2a02260d4a7d5fe7e7c24d8617e6dca12d3a
```
